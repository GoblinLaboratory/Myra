/* Generated by Myra UI Editor at 11/16/2017 2:38:36 AM */

using Microsoft.Xna.Framework;
using Myra.Graphics2D.UI;

namespace Myra.Samples.TabControlSample
{
	public partial class AllWidgets: Grid
	{
		private readonly Window _window;

		public AllWidgets()
		{
			BuildUI();

			_button.Image = DefaultAssets.UISpritesheet["icon-star"];
			_blueButton.Image = DefaultAssets.UISpritesheet["icon-star"];
			_imageButton.Image = DefaultAssets.UISpritesheet["icon-star-outline"];

			var label = new TextBlock
			{
				Text =
					"Lorem ipsum [Green]dolor sit amet, [Red]consectetur adipisicing elit, sed do eiusmod [#AAAAAAAA]tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. [white]Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum!",
				VerticalSpacing = 0,
				TextColor = Color.AntiqueWhite,
				Wrap = true
			};

			var pane = new ScrollPane
			{
				Widget = label,
				WidthHint = 200,
				HeightHint = 200
			};

			_window = new Window
			{
				Title = "Text",
				Content = pane
			};

			_button.Up += (sender, args) =>
			{
				_window.ShowModal(Desktop);
			};

			_blueButton.Up += (sender, args) =>
			{
				_window.ShowModal(Desktop);
			};

			_textButton.Up += (sender, args) =>
			{
				_window.ShowModal(Desktop);
			};

			_imageButton.Up += (sender, args) =>
			{
				_window.ShowModal(Desktop);
			};

			var tree = new Tree
			{
				HasRoot = false,
				GridPositionX = 1,
				GridPositionY = 11
			};
			var node1 = tree.AddSubNode("node1");
			var node2 = node1.AddSubNode("node2");
			var node3 = node2.AddSubNode("node3");
			node3.AddSubNode("node4");
			node3.AddSubNode("node5");
			node2.AddSubNode("node6");
			_gridRight.Widgets.Add(tree);
		}

		public override void InternalRender(RenderContext context)
		{
			_horizontalProgressBar.Value += 0.5f;
			if (_horizontalProgressBar.Value > _horizontalProgressBar.Maximum)
			{
				_horizontalProgressBar.Value = _horizontalProgressBar.Minimum;
			}

			_verticalProgressBar.Value += 0.5f;
			if (_verticalProgressBar.Value > _verticalProgressBar.Maximum)
			{
				_verticalProgressBar.Value = _verticalProgressBar.Minimum;
			}

			base.InternalRender(context);
		}
	}
}